/**
 * Slide AI - JavaScript for AI-powered evaluation and file upload
 */

document.addEventListener('DOMContentLoaded', function() {
    // Initialize AOS if available
    if (typeof AOS !== 'undefined') {
        AOS.init({
            duration: 800,
            offset: 100,
            once: true
        });
    }

    // Upload functionality
    initializeUpload();

    // AI Evaluation Results functionality
    if (document.querySelector('.ai-evaluation-body')) {
        initializeAIEvaluation();
    }

    // Feedback form functionality
    if (document.querySelector('.feedback-page')) {
        initializeFeedbackForm();
    }
});

/**
 * Initialize file upload functionality
 */
function initializeUpload() {
    const fileInput = document.getElementById('file-upload');
    const uploadForm = document.getElementById('upload-form');
    const fileNameDisplay = document.querySelector('.file-name');
    const previewContainer = document.querySelector('.preview-container');
    const previewImg = document.getElementById('preview-image');
    const uploadBtn = document.querySelector('.upload-btn');
    const dropArea = document.querySelector('.upload-area');
    const progressBar = document.querySelector('.upload-progress');
    const progressText = document.querySelector('.progress-text');

    if (!fileInput) return;

    // Display file name when selected
    fileInput.addEventListener('change', function() {
        if (this.files && this.files[0]) {
            const file = this.files[0];
            fileNameDisplay.textContent = file.name;
            fileNameDisplay.style.display = 'block';

            // Show image preview if it's an image
            if (file.type.match('image.*') && previewImg) {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    previewImg.src = e.target.result;
                    previewContainer.style.display = 'block';
                };
                
                reader.readAsDataURL(file);
            }

            // Enable upload button
            if (uploadBtn) {
                uploadBtn.disabled = false;
            }
        }
    });

    // Drag and drop functionality
    if (dropArea) {
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, unhighlight, false);
        });

        function highlight() {
            dropArea.classList.add('highlight');
        }

        function unhighlight() {
            dropArea.classList.remove('highlight');
        }

        dropArea.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            
            if (fileInput && files.length > 0) {
                fileInput.files = files;
                
                // Trigger change event
                const event = new Event('change');
                fileInput.dispatchEvent(event);
            }
        }
    }

    // Handle form submission with progress bar
    if (uploadForm && progressBar && progressText) {
        uploadForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const xhr = new XMLHttpRequest();
            const formData = new FormData(uploadForm);
            
            xhr.open('POST', uploadForm.action, true);
            
            xhr.upload.addEventListener('progress', function(e) {
                if (e.lengthComputable) {
                    const percentComplete = (e.loaded / e.total) * 100;
                    progressBar.style.width = percentComplete + '%';
                    progressText.textContent = Math.round(percentComplete) + '%';
                }
            });
            
            xhr.onload = function() {
                if (xhr.status === 200) {
                    // Success - redirect or show success message
                    console.log('Upload complete');
                    
                    // Example: redirect to success page
                    // window.location.href = '/success';
                    
                    // Or just show a success message
                    progressText.textContent = 'Upload complete!';
                    progressBar.style.backgroundColor = '#4CAF50';
                } else {
                    // Error handling
                    console.error('Upload failed');
                    progressText.textContent = 'Upload failed';
                    progressBar.style.backgroundColor = '#f44336';
                }
            };
            
            xhr.send(formData);
        });
    }
}

/**
 * Initialize the AI Evaluation Results page with dynamic content and charts
 */
function initializeAIEvaluation() {
    // Elements for AI Evaluation
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabPanels = document.querySelectorAll('.tab-panel');
    const criterionProgress = document.querySelectorAll('.criterion-progress');
    const scoreCircle = document.getElementById('score-circle');
    const finalScore = document.getElementById('final-score');
    const scoreGrade = document.getElementById('score-grade');
    
    // Set up tab switching functionality
    if (tabButtons.length > 0) {
        tabButtons.forEach(button => {
            button.addEventListener('click', function() {
                const tabId = this.getAttribute('data-tab');
                
                // Remove active class from all buttons and panels
                tabButtons.forEach(btn => btn.classList.remove('active'));
                tabPanels.forEach(panel => panel.classList.remove('active'));
                
                // Add active class to clicked button and corresponding panel
                this.classList.add('active');
                const panel = document.getElementById(tabId);
                if (panel) panel.classList.add('active');
            });
        });
    }
    
    // Animate progress bars and scores if they exist
    if (criterionProgress.length > 0) {
        criterionProgress.forEach(progress => {
            const width = progress.getAttribute('data-progress') || progress.style.width;
            progress.style.width = '0%';
            setTimeout(() => {
                progress.style.width = width;
            }, 500);
        });
    }

    // Initialize final score if it exists
    if (scoreCircle && finalScore) {
        let scoreValue = parseInt(document.getElementById('overall-score')?.textContent || '0');
        finalScore.textContent = scoreValue;
        
        // Animate the score circle
        if (scoreValue > 0) {
            // Calculate the stroke-dashoffset based on the score (0-100)
            const circumference = 2 * Math.PI * 45; // circle radius is 45
            const dashOffset = circumference - (scoreValue / 100) * circumference;
            scoreCircle.style.strokeDashoffset = dashOffset;
        }
        
        // Set the grade based on score
        if (scoreGrade) {
            let grade = 'F';
            if (scoreValue >= 90) grade = 'A';
            else if (scoreValue >= 80) grade = 'B';
            else if (scoreValue >= 70) grade = 'C';
            else if (scoreValue >= 60) grade = 'D';
            
            scoreGrade.textContent = grade;
        }
    }

    // Log initialization complete
    console.log('AI Evaluation Results page initialized');
}

/**
 * This function initializes the specific charts and data visualizations for the AI Evaluation page
 */
function initializeCharts() {
    // This function would contain code to initialize any charts or data visualizations
    // that might be added to the AI Evaluation Results page in the future
    console.log('Charts initialization function ready');
}

/**
 * Function to print the AI evaluation report
 */
function printAIEvaluationReport() {
    window.print();
}

/**
 * Function to export the AI evaluation report as PDF
 */
function exportAIEvaluationAsPDF() {
    // This would be implemented with a PDF generation library
    alert('PDF export functionality will be implemented in a future update.');
}

/**
 * Function to share the AI evaluation results
 */
function shareAIEvaluationResults() {
    // This would be implemented with a sharing API
    alert('Sharing functionality will be implemented in a future update.');
}

/**
 * Function to download AI evaluation data as JSON
 */
function downloadEvaluationData() {
    // This would be implemented to allow downloading the raw evaluation data
    alert('Data download functionality will be implemented in a future update.');
}

/**
 * Helper function for the AI Evaluation page that handles smooth scrolling to specific sections
 */
function scrollToSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (section) {
        section.scrollIntoView({ behavior: 'smooth' });
    }
}

/**
 * Function to generate a PDF report of the AI evaluation results
 */
function generatePDFReport() {
    // This would be implemented with a PDF generation library
    alert('PDF report generation will be implemented in a future update.');
}

/**
 * Initialize feedback form submission
 */
function initializeFeedbackForm() {
    const feedbackForm = document.getElementById('feedback-form');
    const submitBtn = document.querySelector('.submit-feedback');
    const feedbackMessage = document.getElementById('feedback-message');
    
    if (!feedbackForm) return;
    
    feedbackForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Disable button to prevent multiple submissions
        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...';
        }
        
        // Get form data
        const formData = new FormData(feedbackForm);
        
        // Send data using fetch API
        fetch(feedbackForm.action, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            // Show success message
            if (feedbackMessage) {
                feedbackMessage.innerHTML = '<div class="success-message"><i class="fas fa-check-circle"></i> Thank you for your feedback!</div>';
            }
            
            // Reset form
            feedbackForm.reset();
            
            // Reset button
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.innerHTML = 'Submit Feedback';
            }
        })
        .catch(error => {
            console.error('Error:', error);
            
            // Show error message
            if (feedbackMessage) {
                feedbackMessage.innerHTML = '<div class="error-message"><i class="fas fa-exclamation-circle"></i> There was an error sending your feedback. Please try again.</div>';
            }
            
            // Reset button
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.innerHTML = 'Submit Feedback';
            }
        });
    });
}